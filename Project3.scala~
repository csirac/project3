import akka.actor._
import scala.collection.mutable.ArrayBuffer
import scala.util.Random
import scala.math

object Pastry { 

  /**main method*/
  def main(args: Array[String]) = { 
    val b = 4 /**nodeid and keys are a sequence in base 2^b*/
    val N = 100 /**number of nodes*/
    val system = ActorSystem("PastrySystem")
    var nodeArray = ArrayBuffer[ActorRef]()
    var counter = 0
    while(counter<N){ /**make nodes*/
      var nodey = system.actorOf(Props(classOf[Node],genId(b)), counter.toString)
      nodeArray = nodeArray += nodey
      counter += 1
    }
    system.shutdown
  }

  /**nodes*/
  class Node(id:ArrayBuffer[Int]) extends Actor {
    var neighborhood = Set[ActorRef]()
    def receive = {
      case blah => {
      }
    }
  }

  /**generate random nodeid*/  
  def genId(b:Int):ArrayBuffer[Int] = { 
    val generator = new Random()
    var nodeID = new ArrayBuffer[Int]()
    var counter = 1
    while(counter<=10){ 
      nodeID = nodeID += (generator.nextInt(math.pow(2,b).toInt))
      counter += 1
    } 
    return nodeID
  }
}

